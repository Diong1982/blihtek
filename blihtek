#!/usr/bin/env python3

# Copyright 2013-2014 Emmanuel Vadot <elbarto@bocal.org>
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import os
import sys
import getopt
import hmac
import hashlib
import urllib.request
import urllib.parse
import json
import getpass
import subprocess
import ntpath
import re
import shutil
import time
import signal

versionBLIH = 1.7
versionBLIHTEK = 1.2
global verbose

# 	 /$$$$$$$  /$$       /$$$$$$ /$$   /$$
# 	| $$__  $$| $$      |_  $$_/| $$  | $$
# 	| $$  \ $$| $$        | $$  | $$  | $$
# 	| $$$$$$$ | $$        | $$  | $$$$$$$$
# 	| $$__  $$| $$        | $$  | $$__  $$
# 	| $$  \ $$| $$        | $$  | $$  | $$
# 	| $$$$$$$/| $$$$$$$$ /$$$$$$| $$  | $$
# 	|_______/ |________/|______/|__/  |__/

class blih:
	def	__init__(self, baseurl='https://blih.epitech.eu/', user=None, token=None, user_agent='blih-' + str(versionBLIH) + '-linux'):
		self._baseurl = baseurl
		if token:
			self._token = token
		else:
			self.token_calc()
		if user == None:
			if sys.stdin.isatty():
				user = getpass.getuser()
			else:
				user = sys.stdin.readline().rstrip()
			self._user = getpass.getuser()
		else:
			self._user = user
		self._verbose = verbose
		self._useragent = user_agent

	# 	 /$$$$$$$$ /$$$$$$  /$$   /$$ /$$$$$$$$ /$$   /$$
	# 	|__  $$__//$$__  $$| $$  /$$/| $$_____/| $$$ | $$
	# 	   | $$  | $$  \ $$| $$ /$$/ | $$      | $$$$| $$
	# 	   | $$  | $$  | $$| $$$$$/  | $$$$$   | $$ $$ $$
	# 	   | $$  | $$  | $$| $$  $$  | $$__/   | $$  $$$$
	# 	   | $$  | $$  | $$| $$\  $$ | $$      | $$\  $$$
	# 	   | $$  |  $$$$$$/| $$ \  $$| $$$$$$$$| $$ \  $$
	# 	   |__/   \______/ |__/  \__/|________/|__/  \__/

	def	token_get(self):
		return self._token

	def	token_set(self, token):
		self._token = token

	token = property(token_get, token_set)

	def	token_calc(self):
		if sys.stdin.isatty():
			password = getpass.getpass(setcolor("green") + 'Your password :' + setcolor())
		else:
			password = sys.stdin.readline().rstrip()
		self._token = bytes(hashlib.sha512(bytes(password, 'utf8')).hexdigest(), 'utf8')

	def	sign_data(self, data=None):
		signature = hmac.new(self._token, msg=bytes(self._user, 'utf8'), digestmod=hashlib.sha512)
		if data:
			signature.update(bytes(json.dumps(data, sort_keys=True, indent=4, separators=(',', ': ')), 'utf8'))

		signed_data = {'user' : self._user, 'signature' : signature.hexdigest()}
		if data != None:
			signed_data['data'] = data
		return signed_data

	def	request(self, resource, method='GET', content_type='application/json', data=None, url=None):
		signed_data = self.sign_data(data)

		if url:
			req = urllib.request.Request(url=url, method=method, data=bytes(json.dumps(signed_data), 'utf8'))
		else:
			req = urllib.request.Request(url=self._baseurl + resource, method=method, data=bytes(json.dumps(signed_data), 'utf8'))
		req.add_header('Content-Type', content_type)
		req.add_header('User-Agent', self._useragent)
		try:
			f = urllib.request.urlopen(req)
		except urllib.error.HTTPError as e:
			print (setcolor("red") + 'HTTP Error ' + str(e.code) + setcolor())
			data = json.loads(e.read().decode('utf8'))
			print (setcolor("red") + "Error message" + setcolor() + " : '" + data['error'] + "'")
			sys.exit(1)

		if f.status == 200:
			try:
				data = json.loads(f.read().decode('utf8'))
			except:
				print (setcolor("red") + "Can't decode data, aborting" + setcolor())
				sys.exit(1)
			return (f.status, f.reason, f.info(), data)

		print (setcolor("red") + 'Unknown error' + setcolor())
		sys.exit(1)

	# 	 /$$$$$$$  /$$$$$$$$ /$$$$$$$   /$$$$$$
	# 	| $$__  $$| $$_____/| $$__  $$ /$$__  $$
	# 	| $$  \ $$| $$      | $$  \ $$| $$  \ $$
	# 	| $$$$$$$/| $$$$$   | $$$$$$$/| $$  | $$
	# 	| $$__  $$| $$__/   | $$____/ | $$  | $$
	# 	| $$  \ $$| $$      | $$      | $$  | $$
	# 	| $$  | $$| $$$$$$$$| $$      |  $$$$$$/
	# 	|__/  |__/|________/|__/       \______/

	def	repo_create(self, name, type='git', description=None):
		data = {'name' : name, 'type' : type}
		if description:
			data['description'] = description
		status, reason, headers, data = self.request('/repositories', method='POST', data=data)
		print (setcolor("green") + data['message'] + setcolor())

	def	repo_list(self):
		status, reason, headers, data = self.request('/repositories', method='GET')
		return data['repositories']

	def	repo_delete(self, name):
		status, reason, headers, data = self.request('/repository/' + name, method='DELETE')
		print (setcolor("green") + data['message'] + setcolor())

	def	repo_info(self, name):
		status, reason, headers, data = self.request('/repository/' + name, method='GET')
		print (setcolor("green") + data['message'] + setcolor())

	def	repo_setacl(self, name, acluser, acl):
		data = {'user' : acluser, 'acl' : acl}
		status, reason, headers, data = self.request('/repository/' + name + '/acls', method='POST', data=data)
		print (setcolor("green") + data['message'] + " for " + setcolor("blue") + acluser + setcolor())

	def	repo_getacl(self, name):
		status, reason, headers, data = self.request('/repository/' + name + '/acls', method='GET')
		for i in data.keys():
			print (setcolor("green") + i + setcolor() + '\t' + setcolor("blue") + data[i] + setcolor())

	# 	  /$$$$$$   /$$$$$$  /$$   /$$ /$$   /$$ /$$$$$$$$ /$$     /$$
	# 	 /$$__  $$ /$$__  $$| $$  | $$| $$  /$$/| $$_____/|  $$   /$$/
	# 	| $$  \__/| $$  \__/| $$  | $$| $$ /$$/ | $$       \  $$ /$$/
	# 	|  $$$$$$ |  $$$$$$ | $$$$$$$$| $$$$$/  | $$$$$     \  $$$$/
	# 	 \____  $$ \____  $$| $$__  $$| $$  $$  | $$__/      \  $$/
	# 	 /$$  \ $$ /$$  \ $$| $$  | $$| $$\  $$ | $$          | $$
	# 	|  $$$$$$/|  $$$$$$/| $$  | $$| $$ \  $$| $$$$$$$$    | $$
	# 	 \______/  \______/ |__/  |__/|__/  \__/|________/    |__/

	def	sshkey_upload(self, keyfile):
		try:
			f = open(keyfile, 'r')
		except (PermissionError, FileNotFoundError):
			print (setcolor("red") + "Can't open file" + setcolor() + " : " + keyfile)
			return
		key = urllib.parse.quote(f.read().strip('\n'))
		f.close()
		data = {'sshkey' : key}
		status, reason, headers, data = self.request('/sshkeys', method='POST', data=data)
		print (setcolor("green") + data['message'] + setcolor())

	def	sshkey_delete(self, sshkey):
		status, reason, headers, data = self.request('/sshkey/' + sshkey, method='DELETE')
		print (setcolor("green") + data['message'] + setcolor())

	def	sshkey_list(self):
		status, reason, headers, data = self.request('/sshkeys', method='GET')
		for i in data.keys():
			print (setcolor("green") + i + setcolor() + '\n' + data[i] + '\n')

	def	whoami(self):
		status, reason, headers, data = self.request('/whoami', method='GET')
		print (setcolor("green") + data['message'] + setcolor())

# 	 /$$$$$$$  /$$       /$$$$$$ /$$   /$$ /$$$$$$$$ /$$$$$$$$ /$$   /$$
# 	| $$__  $$| $$      |_  $$_/| $$  | $$|__  $$__/| $$_____/| $$  /$$/
# 	| $$  \ $$| $$        | $$  | $$  | $$   | $$   | $$      | $$ /$$/
# 	| $$$$$$$ | $$        | $$  | $$$$$$$$   | $$   | $$$$$   | $$$$$/
# 	| $$__  $$| $$        | $$  | $$__  $$   | $$   | $$__/   | $$  $$
# 	| $$  \ $$| $$        | $$  | $$  | $$   | $$   | $$      | $$\  $$
# 	| $$$$$$$/| $$$$$$$$ /$$$$$$| $$  | $$   | $$   | $$$$$$$$| $$ \  $$
# 	|_______/ |________/|______/|__/  |__/   |__/   |________/|__/  \__/

class blihtek:
	def	signal_handler(signal, frame):
		print(setcolor("red") + 'Quit...' + setcolor())
		shutil.rmtree("/tmp/blihtek", ignore_errors=True)
		sys.exit(1)

	def	read_config_file():
		filename = os.getenv('HOME') + "/.blihtek"
		if os.path.isfile(filename) == False:
			result = {}
			return (result)
		with open(filename, 'r') as f:
			fileContent = f.read()
		if fileContent == "":
			result = {}
		else:
			try:
				result = json.loads(fileContent)
			except Exception as e:
				print(setcolor("red") + "JSON invalid" + setcolor())
				if verbose == True:
					print(setcolor("red") + str(e) + setcolor())
				sys.exit(1)
		return (result)

	def	write_config_file(fileData):
		filename = os.getenv('HOME') + "/.blihtek"
		try:
			result = json.dumps(fileData)
		except Exception as e:
			print(setcolor("red") + "JSON invalid" + setcolor())
			if verbose == True:
				print(setcolor("red") + str(e) + setcolor())
			sys.exit(1)
		with open(filename, 'w') as f:
			fileContent = f.write(result)

	# 	 /$$$$$$$  /$$$$$$$$ /$$$$$$$   /$$$$$$
	# 	| $$__  $$| $$_____/| $$__  $$ /$$__  $$
	# 	| $$  \ $$| $$      | $$  \ $$| $$  \ $$
	# 	| $$$$$$$/| $$$$$   | $$$$$$$/| $$  | $$
	# 	| $$__  $$| $$__/   | $$____/ | $$  | $$
	# 	| $$  \ $$| $$      | $$      | $$  | $$
	# 	| $$  | $$| $$$$$$$$| $$      |  $$$$$$/
	# 	|__/  |__/|________/|__/       \______/

	def	repo_list(blih):
		data = blih.repo_list()
		result = [];
		for i in data:
			result.append(i)
		result.sort()
		for i in result:
			print (setcolor("green") + i + setcolor())

	def	repo_list_match(blih, text):
		data = blih.repo_list()
		regex = re.compile(str('^[\S\s]*' + text + '[\S\s]*$'))
		result = [];
		anyMatch = True
		for i in data:
			result.append(i)
		result.sort()
		for i in result:
			if regex.match(i):
				anyMatch = False
				print (setcolor("green") + i + setcolor())
		if anyMatch:
			print (setcolor("red") + "There is no repositories containing " + setcolor("blue") + text + setcolor())

	def	repo_clone(user, login, repo, folder):
		command = "git clone " + user + "@git.epitech.eu:/" + login + "/" + repo + " " + folder + "/" + repo
		try:
			res = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
		except Exception as e:
			print (setcolor("red") + "Error with repository" + setcolor())
			if verbose == True:
				print(setcolor("red") + str(e) + setcolor())
			sys.exit(1)
		print (setcolor("green") + "Repository cloned" + setcolor())

	def	repo_link(user, login, repo, folder):
		if os.path.isdir(folder) == False:
			print (setcolor("red") + "Folder does not exist" + setcolor())
			sys.exit(1)
		pwd_save = os.getenv('PWD')
		command = "cd " + folder + "&& git init && git remote add origin " + user + "@git.epitech.eu:/" + login + "/" + repo + "&& cd " + pwd_save
		try:
			res = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
		except Exception as e:
			print (setcolor("red") + "Error with repository" + setcolor())
			if verbose == True:
				print(setcolor("red") + str(e) + setcolor())
			sys.exit(1)
		print (setcolor("green") + "Repository linked" + setcolor())

	def	repo_bkup(user, login, repo, folder):
		dirBase = "/tmp/blihtek"
		if not os.path.isdir(dirBase):
			os.makedirs(dirBase)
		command = "git clone " + user + "@git.epitech.eu:/" + login + "/" + repo + " " + dirBase + "/" + repo
		try:
			res = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
		except Exception as e:
			print (setcolor("red") + "Error with repository" + setcolor())
			if verbose == True:
				print(setcolor("red") + str(e) + setcolor())
			shutil.rmtree(dirBase, ignore_errors=True)
			sys.exit(1)
		command = "cd " + dirBase + " && tar cfz " + "../backup.tgz *"
		try:
			res = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
		except Exception as e:
			print (setcolor("red") + "Error with tar" + setcolor())
			if verbose == True:
				print(setcolor("red") + str(e) + setcolor())
			shutil.rmtree(dirBase, ignore_errors=True)
			sys.exit(1)
		shutil.rmtree(dirBase, ignore_errors=True)
		shutil.move("/tmp/backup.tgz", folder)
		print (setcolor("green") + "Backup finished" + setcolor())

	def	repo_bkupall(blih, user, folder):
		dirBase = "/tmp/blihtek"
		if not os.path.isdir(dirBase):
			os.makedirs(dirBase)
		listReposTmp = blih.repo_list()
		listRepos = [];
		for i in listReposTmp:
			listRepos.append(i)
		listRepos.sort()
		val = 0
		print(len(listRepos))
		for i in listRepos:
			val += 1
			print(str(setcolor("green") + "Backup : " + setcolor("blue") + "{0}" + setcolor() + "/" + setcolor("blue") + "{1}" + setcolor() + " (" + setcolor("blue") + "{2}" + setcolor() + ")" + setcolor()).format(val, len(listRepos), i))
			command = "git clone " + user + "@git.epitech.eu:/" + user + "/" + i + " " + dirBase + "/" + i
			try:
				res = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
			except Exception as e:
				print (setcolor("red") + "Error with repository" + setcolor())
				if verbose == True:
					print(setcolor("red") + str(e) + setcolor())
				shutil.rmtree(dirBase, ignore_errors=True)
				sys.exit(1)
		command = "cd " + dirBase + " && tar cfz " + "../backup.tgz *"
		try:
			res = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
		except Exception as e:
			print (setcolor("red") + "Error with tar" + setcolor())
			if verbose == True:
				print(setcolor("red") + str(e) + setcolor())
			shutil.rmtree(dirBase, ignore_errors=True)
			sys.exit(1)
		shutil.rmtree(dirBase, ignore_errors=True)
		shutil.move("/tmp/backup.tgz", folder)
		print (setcolor("green") + "Backup finished" + setcolor())

	# 	  /$$$$$$  /$$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$
	# 	 /$$__  $$| $$__  $$ /$$__  $$| $$  | $$| $$__  $$
	# 	| $$  \__/| $$  \ $$| $$  \ $$| $$  | $$| $$  \ $$
	# 	| $$ /$$$$| $$$$$$$/| $$  | $$| $$  | $$| $$$$$$$/
	# 	| $$|_  $$| $$__  $$| $$  | $$| $$  | $$| $$____/
	# 	| $$  \ $$| $$  \ $$| $$  | $$| $$  | $$| $$
	# 	|  $$$$$$/| $$  | $$|  $$$$$$/|  $$$$$$/| $$
	# 	 \______/ |__/  |__/ \______/  \______/ |__/

	def	grup_create(name):
		fileData = blihtek.read_config_file()
		userList = []
		if (name in fileData):
			print(setcolor("red") + "Group " + setcolor("blue") + name + setcolor("red") + " already exists" + setcolor())
		else:
			fileData[name] = userList
			blihtek.write_config_file(fileData)
			print (setcolor("green") + "Group " + setcolor("blue") + name + setcolor("green") + " created" + setcolor())

	def	grup_add(name, user):
		fileData = blihtek.read_config_file()
		if (name in fileData):
			if (user in fileData[name]):
				print (setcolor("red") + "User " + setcolor("blue") + user + setcolor("red") + " already exists" + setcolor())
			else:
				fileData[name].append(user)
				blihtek.write_config_file(fileData)
				print (setcolor("green") + "User " + setcolor("blue") + user + setcolor("green") + " added" + setcolor())
		else:
			print(setcolor("red") + "Group not found" + setcolor())

	def	grup_rm(name):
		fileData = blihtek.read_config_file()
		if name in fileData:
			fileData.pop(name)
			blihtek.write_config_file(fileData)
			print (setcolor("green") + "Group removed" + setcolor())
		else:
			print (setcolor("red") + "Group not found" + setcolor())

	def	grup_rmuser(name, user):
		fileData = blihtek.read_config_file()
		if name in fileData:
			if user in fileData[name]:
				fileData[name].remove(user)
				blihtek.write_config_file(fileData)
				print (setcolor("green") + "User removed" + setcolor())
			else:
				print (setcolor("red") + "User not found" + setcolor())
		else:
			print (setcolor("red") + "Group not found" + setcolor())

	def	grup_list(name = ""):
		fileData = blihtek.read_config_file()
		if name != "":
			if name in fileData:
				group = fileData[name]
				print (setcolor("green") + "Group " + setcolor("blue") + name + setcolor())
				for user in group:
					print (setcolor("green") + "\t" + user + setcolor())
			else:
				print (setcolor("red") + "Group not found" + setcolor())
		else:
			groups = []
			for item in fileData:
				groups.append(item)
			groups.sort()
			for item in groups:
				print (setcolor("green") + item + setcolor())

	# 	  /$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$$
	# 	 /$$__  $$ /$$__  $$| $$$ | $$| $$_____/
	# 	| $$  \__/| $$  \ $$| $$$$| $$| $$
	# 	| $$      | $$  | $$| $$ $$ $$| $$$$$
	# 	| $$      | $$  | $$| $$  $$$$| $$__/
	# 	| $$    $$| $$  | $$| $$\  $$$| $$
	# 	|  $$$$$$/|  $$$$$$/| $$ \  $$| $$
	# 	 \______/  \______/ |__/  \__/|__/

	def	conf_crypt():
		if sys.stdin.isatty():
			password = getpass.getpass(setcolor("green") + 'Your password :' + setcolor())
		else:
			password = sys.stdin.readline().rstrip()
		token = bytes(hashlib.sha512(bytes(password, 'utf8')).hexdigest(), 'utf8')
		print(token.decode("utf-8"))

	def	conf_disp(variable):
		if variable == "login":
			variable = "EPITECH_LOGIN"
		elif variable == "token":
			variable = "EPITECH_TOKEN"
		elif variable == "folder":
			variable = "EPITECH_FOLDER"
		else:
			usage("config")
		if os.getenv(variable) != None:
			print (setcolor("green") + variable + setcolor() + "\n" + os.getenv(variable))
		else:
			print (setcolor("red") + variable + " is not set" + setcolor())

	def	conf_setconfig():
		print (setcolor("green") + "What is your type of shell?" + setcolor())
		print (setcolor("green") + "\t[" + setcolor("blue") + "1" + setcolor("green") + "]" + setcolor("blue") + "bash-like" + setcolor())
		print (setcolor("green") + "\t[" + setcolor("blue") + "2" + setcolor("green") + "]" + setcolor("blue") + "fish-like" + setcolor())
		type_shell = input()
		if not type_shell.isdigit() or int(type_shell) <= 0 or int(type_shell) > 2:
			print (setcolor("red") + "Invalid selection" + setcolor())
			return
		print (type_shell)

	def	conf_install():
		if sys.argv[0].startswith("/usr/bin") or sys.argv[0].startswith("/bin"):
			print (setcolor("blue") + "blihtek" + setcolor("green") + " is already installed" + setcolor())
		else:
			location = input(setcolor("green") + "Where do I install " + setcolor("blue") + "blihtek" + setcolor("green") + "? (Default : " + setcolor("blue") + "/usr/bin" + setcolor("green") + ") : " + setcolor())
			if not location or not location.startswith("/"):
				location = "/usr/bin"
			install_cmd = "sudo cp " + sys.argv[0] + " " + location
			try:
				res = subprocess.check_output(install_cmd, stderr=subprocess.STDOUT, shell=True)
			except Exception as e:
				print (setcolor("red") + "Error with installation" + setcolor())
				if verbose == True:
					print(setcolor("red") + str(e) + setcolor())
				sys.exit(1)
			print (setcolor("green") + "Successfuly instaled in " + setcolor("blue") + location + setcolor())

# 	 /$$$$$$$  /$$$$$$$$ /$$$$$$$   /$$$$$$
# 	| $$__  $$| $$_____/| $$__  $$ /$$__  $$
# 	| $$  \ $$| $$      | $$  \ $$| $$  \ $$
# 	| $$$$$$$/| $$$$$   | $$$$$$$/| $$  | $$
# 	| $$__  $$| $$__/   | $$____/ | $$  | $$
# 	| $$  \ $$| $$      | $$      | $$  | $$
# 	| $$  | $$| $$$$$$$$| $$      |  $$$$$$/
# 	|__/  |__/|________/|__/       \______/

def	repository(args, baseurl, user, token, folder, user_agent):
	if len(args) == 0:
		usage("repo")
	if args[0] == 'new':
		if len(args) != 2:
			usage("repo")
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.repo_create(args[1])
		handle.repo_setacl(args[1], 'ramassage-tek', 'r')
		blihtek.repo_clone(user, user, args[1], folder)
	elif args[0] == 'create':
		if len(args) != 2:
			usage("repo")
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.repo_create(args[1])
		handle.repo_setacl(args[1], 'ramassage-tek', 'r')
	elif args[0] == 'clone':
		if len(args) == 2:
			blihtek.repo_clone(user, user, args[1], folder)
		elif len(args) == 3:
			blihtek.repo_clone(user, args[1], args[2], folder)
		else:
			usage("repo")
	elif args[0] == 'link':
		if len(args) == 2:
			blihtek.repo_link(user, user, args[1], folder)
		elif len(args) == 3:
			blihtek.repo_link(user, args[1], args[2], folder)
		else:
			usage("repo")
	elif args[0] == 'list':
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		if len(args) == 1:
			blihtek.repo_list(handle)
		elif len(args) == 2:
			blihtek.repo_list_match(handle, args[1])
		else:
			usage("repo")
	elif args[0] == 'info':
		if len(args) != 2:
			usage("repo")
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.repo_info(args[1])
	elif args[0] == 'delete':
		if len(args) != 2:
			usage("repo")
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.repo_delete(args[1])
	elif args[0] == 'setacl':
		if len(args) != 4 and len(args) != 3:
			usage("repo")
		if len(args) == 3:
			acl = ''
		else:
			acl = args[3]
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		fileData = blihtek.read_config_file()
		if args[2] in fileData:
			group = fileData[args[2]]
			for user in group:
				handle.repo_setacl(args[1], user, acl)
		else:
			handle.repo_setacl(args[1], args[2], acl)
	elif args[0] == 'getacl':
		if len(args) != 2:
			usage("repo")
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.repo_getacl(args[1])
	elif args[0] == 'backup':
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		if len(args) == 2:
			blihtek.repo_bkup(user, user, args[1], folder)
		elif len(args) == 3:
			blihtek.repo_bkup(user, args[1], args[2], folder)
		else:
			usage("repo")
	elif args[0] == 'backupall':
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		if len(args) == 1:
			blihtek.repo_bkupall(handle, user, folder)
		else:
			usage("repo")
	else:
		usage("repo")

# 	  /$$$$$$   /$$$$$$  /$$   /$$ /$$   /$$ /$$$$$$$$ /$$     /$$
# 	 /$$__  $$ /$$__  $$| $$  | $$| $$  /$$/| $$_____/|  $$   /$$/
# 	| $$  \__/| $$  \__/| $$  | $$| $$ /$$/ | $$       \  $$ /$$/
# 	|  $$$$$$ |  $$$$$$ | $$$$$$$$| $$$$$/  | $$$$$     \  $$$$/
# 	 \____  $$ \____  $$| $$__  $$| $$  $$  | $$__/      \  $$/
# 	 /$$  \ $$ /$$  \ $$| $$  | $$| $$\  $$ | $$          | $$
# 	|  $$$$$$/|  $$$$$$/| $$  | $$| $$ \  $$| $$$$$$$$    | $$
# 	 \______/  \______/ |__/  |__/|__/  \__/|________/    |__/

def	sshkey(args, baseurl, user, token, folder, user_agent):
	if len(args) == 0:
		usage("ssh")
	if args[0] == 'list':
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.sshkey_list()
	elif args[0] == 'upload':
		key = None
		if len(args) == 1:
			key = os.getenv('HOME') + '/.ssh/id_rsa.pub'
		elif len(args) == 2:
			key = args[1]
		else:
			usage("ssh")
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.sshkey_upload(key)
	elif args[0] == 'delete':
		if len(args) != 2:
			usage("ssh")
		handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
		handle.sshkey_delete(args[1])
	else:
		usage("ssh")

def	whoami(args, baseurl, user, token, folder, user_agent):
	handle = blih(baseurl=baseurl, user=user, token=token, user_agent=user_agent)
	handle.whoami()

# 	  /$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$$ /$$$$$$  /$$$$$$
# 	 /$$__  $$ /$$__  $$| $$$ | $$| $$_____/|_  $$_/ /$$__  $$
# 	| $$  \__/| $$  \ $$| $$$$| $$| $$        | $$  | $$  \__/
# 	| $$      | $$  | $$| $$ $$ $$| $$$$$     | $$  | $$ /$$$$
# 	| $$      | $$  | $$| $$  $$$$| $$__/     | $$  | $$|_  $$
# 	| $$    $$| $$  | $$| $$\  $$$| $$        | $$  | $$  \ $$
# 	|  $$$$$$/|  $$$$$$/| $$ \  $$| $$       /$$$$$$|  $$$$$$/
# 	 \______/  \______/ |__/  \__/|__/      |______/ \______/

def	config(args, baseurl, user, token, folder, user_agent):
	if len(args) == 0:
		usage("config")
	if args[0] == 'install':
		blihtek.conf_install()
		blihtek.conf_setconfig()
	elif args[0] == 'crypt':
		blihtek.conf_crypt()
	elif args[0] == 'disp':
		if len(args) == 1:
			blihtek.conf_disp("login")
			blihtek.conf_disp("token")
			blihtek.conf_disp("folder")
		elif len(args) == 2:
			blihtek.conf_disp(args[1])
		else:
			usage("config")
	else:
		usage("config")

# 	  /$$$$$$  /$$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$
# 	 /$$__  $$| $$__  $$ /$$__  $$| $$  | $$| $$__  $$
# 	| $$  \__/| $$  \ $$| $$  \ $$| $$  | $$| $$  \ $$
# 	| $$ /$$$$| $$$$$$$/| $$  | $$| $$  | $$| $$$$$$$/
# 	| $$|_  $$| $$__  $$| $$  | $$| $$  | $$| $$____/
# 	| $$  \ $$| $$  \ $$| $$  | $$| $$  | $$| $$
# 	|  $$$$$$/| $$  | $$|  $$$$$$/|  $$$$$$/| $$
# 	 \______/ |__/  |__/ \______/  \______/ |__/

def	group(args, baseurl, user, token, folder, user_agent):
	if len(args) == 0:
		usage("group")
	if args[0] == 'create':
		if len(args) >= 2:
			blihtek.grup_create(args[1])
			if len(args) > 2:
				i = 2
				while i < len(args):
					blihtek.grup_add(args[1], args[i])
					i += 1
		else:
			usage("group")
	elif args[0] == 'add':
		if len(args) > 2:
			i = 2
			while i < len(args):
				blihtek.grup_add(args[1], args[i])
				i += 1
		else:
			usage("group")
	elif args[0] == 'remove':
		if len(args) == 2:
			blihtek.grup_rm(args[1])
		elif len(args) > 2:
			i = 2
			while i < len(args):
				blihtek.grup_rmuser(args[1], args[i])
				i += 1
		else:
			usage("group")
	elif args[0] == 'list':
		if len(args) == 1:
			blihtek.grup_list()
		elif len(args) == 2:
			blihtek.grup_list(args[1])
		else:
			usage("group")
	else:
		usage("group")

def	version():
	lastVersion = urllib.request.urlopen('https://raw.githubusercontent.com/hug33k/blihtek/master/.version').read().decode('utf-8').replace('\n', '')
	if lastVersion <= str(versionBLIHTEK):
		isUpdate = False
	else:
		isUpdate = True
	print (setcolor("blue") + 'Versions\n')
	print ('blih\t' + setcolor("green") + str(versionBLIH))
	if isUpdate == False:
		print (setcolor("blue") + 'blihtek\t' + setcolor("green") + str(versionBLIHTEK) + setcolor())
	else:
		print (setcolor("blue") + 'blihtek\t' + setcolor("red") + str(versionBLIHTEK))
		print (setcolor("red") + 'An update is available ' + setcolor("green") + '(' + lastVersion + ')' + setcolor())
	sys.exit(1)

def	setcolor(color = ""):
	if colors == True:
		if color == "red":
			return '\033[1;31m'
		elif color == "blue":
			return '\033[1;34m'
		elif color == "green":
			return '\033[1;32m'
		else:
			return '\033[0m'
	else:
		return ""

# 	 /$$   /$$  /$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$$$
# 	| $$  | $$ /$$__  $$ /$$__  $$ /$$__  $$| $$_____/
# 	| $$  | $$| $$  \__/| $$  \ $$| $$  \__/| $$
# 	| $$  | $$|  $$$$$$ | $$$$$$$$| $$ /$$$$| $$$$$
# 	| $$  | $$ \____  $$| $$__  $$| $$|_  $$| $$__/
# 	| $$  | $$ /$$  \ $$| $$  | $$| $$  \ $$| $$
# 	|  $$$$$$/|  $$$$$$/| $$  | $$|  $$$$$$/| $$$$$$$$
# 	 \______/  \______/ |__/  |__/ \______/ |________/

def	usage(mode = ""):
	name = ntpath.basename(sys.argv[0])
	if mode == "repo":
		print (setcolor("red") + 'Usage: ' + name + ' [options] repository command ...')
		print (setcolor() + '\nCommands :')
		print ('\tnew ' + setcolor("blue") + 'repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Create and clone the repository ' + setcolor("blue") + 'repo' + setcolor())
		print ('\tcreate ' + setcolor("blue") + 'repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Create the repository ' + setcolor("blue") + 'repo' + setcolor())
		print ('\tclone ' + setcolor("blue") + 'repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Clone the repository ' + setcolor("blue") + 'repo' + setcolor())
		print ('\tclone ' + setcolor("blue") + 'user repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Clone the repository ' + setcolor("blue") + 'repo' + setcolor("green") + ' of ' + setcolor("blue") + 'user' + setcolor())
		print ('\tlink ' + setcolor("blue") + 'repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Link the current directory with ' + setcolor("blue") + 'repo' + setcolor())
		print ('\tlink ' + setcolor("blue") + 'user repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Link the current directory with ' + setcolor("blue") + 'repo' + setcolor("green") + ' of ' + setcolor("blue") + 'user' + setcolor())
		print ('\tinfo ' + setcolor("blue") + 'repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Get the repository ' + setcolor("blue") + 'info' + setcolor("green") + ' metadata' + setcolor())
		print ('\tlist\t\t\t\t--' + setcolor("green") + ' List the repositories created' + setcolor())
		print ('\tlist ' + setcolor("blue") + 'text' + setcolor() + '\t\t\t--' + setcolor("green") + ' List the repositories created containing ' + setcolor("blue") + 'text' + setcolor())
		print ('\tbackup ' + setcolor("blue") + 'repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Backup the repository ' + setcolor("blue") + 'repo' + setcolor())
		print ('\tbackup ' + setcolor("blue") + 'user repo' + setcolor() + '\t\t--' + setcolor("green") + ' Backup the repository ' + setcolor("blue") + 'repo' + setcolor("green") + ' of ' + setcolor("blue") + 'user' + setcolor())
		print ('\tbackupall\t\t\t--' + setcolor("green") + ' Backup all your repositories' + setcolor())
		print ('\tgetacl ' + setcolor("blue") + 'repo' + setcolor() + '\t\t\t--' + setcolor("green") + ' Get the acls set for the repository ' + setcolor("blue") + 'repo' + setcolor())
		print ('\tsetacl ' + setcolor("blue") + 'repo user acl' + setcolor() + '\t\t--' + setcolor("green") + ' Set (or remove) an acl for ' + setcolor("blue") + 'user' + setcolor("green") + ' on ' + setcolor("blue") + 'repo' + setcolor())
		print ('\t\t\t\t\tACL format:')
		print ('\t\t\t\t\t' + setcolor("blue") + 'r' + setcolor() + ' for ' + setcolor("green") + 'read' + setcolor())
		print ('\t\t\t\t\t' + setcolor("blue") + 'w' + setcolor() + ' for ' + setcolor("green") + 'write' + setcolor())
		print ('\t\t\t\t\t' + setcolor("blue") + 'a' + setcolor() + ' for ' + setcolor("green") + 'admin' + setcolor())
	elif mode == "ssh":
		print (setcolor("red") + 'Usage: ' + name + ' [options] sshkey command ...')
		print (setcolor() + '\nCommands :')
		print ('\tupload ' + setcolor("blue") + 'file' + setcolor() + '\t\t\t-- ' + setcolor("green") + 'Upload a new ssh-key' + setcolor())
		print ('\tlist\t\t\t\t-- ' + setcolor("green") + 'List the ssh-keys' + setcolor())
		print ('\tdelete ' + setcolor("blue") + 'sshkey' + setcolor() + '\t\t\t-- ' + setcolor("green") + 'Delete the sshkey with comment ' + setcolor("blue") + 'sshkey' + setcolor())
	elif mode == "config":
		print (setcolor("red") + 'Usage: ' + name + ' [options] config command ...')
		print (setcolor() + '\nCommands :')
		print ('\tinstall ' + '\t\t\t-- ' + setcolor("green") + 'Install ' + setcolor("blue") + 'blihtek' + setcolor())
		print ('\tcrypt ' + '\t\t\t\t-- ' + setcolor("green") + 'Crypt your password in SHA512 for ' + setcolor("blue") + 'EPITECH_TOKEN' + setcolor())
		print ('\tdisp ' + '\t\t\t\t-- ' + setcolor("green") + 'Display all the values of blihtek variables' + setcolor())
		print ('\tdisp ' + setcolor("blue") + 'variable' + setcolor() + '\t\t\t-- ' + setcolor("green") + 'Display the value of blihtek ' + setcolor("blue") + 'variable' + setcolor())
		print ('\t\t\t\t\tVariables:')
		print ('\t\t\t\t\t' + setcolor("blue") + 'login' + setcolor() + '  for ' + setcolor("green") + 'EPITECH_LOGIN' + setcolor())
		print ('\t\t\t\t\t' + setcolor("blue") + 'token' + setcolor() + '  for ' + setcolor("green") + 'EPITECH_TOKEN' + setcolor())
		print ('\t\t\t\t\t' + setcolor("blue") + 'folder' + setcolor() + ' for ' + setcolor("green") + 'EPITECH_FOLDER' + setcolor())
	elif mode == "group":
		print (setcolor("red") + 'Usage: ' + name + ' [options] config command ...')
		print (setcolor() + '\nCommands :')
		print ('\tcreate ' + setcolor("blue") + 'name' + setcolor() + '\t\t\t-- ' + setcolor("green") + 'Create the group ' + setcolor("blue") + 'name' + setcolor())
		print ('\tcreate ' + setcolor("blue") + 'name users' + setcolor() + '\t\t-- ' + setcolor("green") + 'Create the group ' + setcolor("blue") + 'name' + setcolor("green") + ' with ' + setcolor("blue") + 'users' + setcolor("green") + ' (one or more)' + setcolor())
		print ('\tadd ' + setcolor("blue") + 'name users' + setcolor() + '\t\t\t-- ' + setcolor("green") + 'Add ' + setcolor("blue") + 'users' + setcolor("green") + ' (one or more) to the group ' + setcolor("blue") + 'name' + setcolor())
		print ('\tremove ' + setcolor("blue") + 'name' + setcolor() + '\t\t\t-- ' + setcolor("green") + 'Remove the group ' + setcolor("blue") + 'name' + setcolor())
		print ('\tremove ' + setcolor("blue") + 'name users' + setcolor() + '\t\t-- ' + setcolor("green") + 'Remove ' + setcolor("blue") + 'users' + setcolor("green") + ' (one or more) from the group ' + setcolor("blue") + 'name' + setcolor())
		print ('\tlist ' + setcolor() + '\t\t\t\t-- ' + setcolor("green") + 'List the groups' + setcolor())
		print ('\tlist ' + setcolor("blue") + 'name' + setcolor() + '\t\t\t-- ' + setcolor("green") + 'List the users in the group ' + setcolor("blue") + 'name' + setcolor())
	else:
		print (setcolor("red") + 'Usage: ' + name + ' [options] command ...')
		print (setcolor() + '\nGlobal Options :')
		print ('\t-u ' + setcolor("blue") + 'user' + setcolor() + ' | --user=' + setcolor("blue") + 'user' + setcolor() + '\t\t-- ' + setcolor("green") + 'Run as ' + setcolor("blue") + 'user' + setcolor())
		print ('\t-f ' + setcolor("blue") + 'folder' + setcolor() + ' | --folder=' + setcolor("blue") + 'folder' + setcolor() + '\t-- ' + setcolor("green") + 'Execute in ' + setcolor("blue") + 'folder' + setcolor())
		print ('\t-v | --verbose\t\t\t-- ' + setcolor("green") + 'Verbose' + setcolor())
		print ('\t-c | --nocolor\t\t\t-- ' + setcolor("green") + 'Remove the colors' + setcolor())
		print ('\t-b ' + setcolor("blue") + 'url' + setcolor() + ' | --baseurl=' + setcolor("blue") + 'url' + setcolor() + '\t\t-- ' + setcolor("green") + 'Base URL for BLIH' + setcolor())
		print ('\t-t ' + setcolor("blue") + 'token' + setcolor() + ' | --token ' + setcolor("blue") + 'token' + setcolor() + '\t-- ' + setcolor("green") + 'Specify token in the cmdline' + setcolor())
		print ('\t-V | --version\t\t\t-- ' + setcolor("green") + 'Version' + setcolor())
		print ('\nCommands :')
		print ('\trepository\t\t\t-- ' + setcolor("green") + 'Repository management' + setcolor())
		print ('\tgroup\t\t\t\t-- ' + setcolor("green") + 'Group management' + setcolor())
		print ('\tsshkey\t\t\t\t-- ' + setcolor("green") + 'SSH-KEYS management' + setcolor())
		print ('\twhoami\t\t\t\t-- ' + setcolor("green") + 'Print who you are' + setcolor())
		print ('\tconfig\t\t\t\t-- ' + setcolor("green") + 'Modify blihtek configuration' + setcolor())
		print ('\nEnvironment variables :')
		print ('\tEPITECH_LOGIN\t\t\t-- ' + setcolor("green") + 'Your login' + setcolor())
		print ('\tEPITECH_TOKEN\t\t\t-- ' + setcolor("green") + 'Your UNIX password in SHA512' + setcolor())
		print ('\tEPITECH_FOLDER\t\t\t-- ' + setcolor("green") + 'Your work folder' + setcolor())
	print (setcolor())
	sys.exit(1)

# 	 /$$      /$$  /$$$$$$  /$$$$$$ /$$   /$$
# 	| $$$    /$$$ /$$__  $$|_  $$_/| $$$ | $$
# 	| $$$$  /$$$$| $$  \ $$  | $$  | $$$$| $$
# 	| $$ $$/$$ $$| $$$$$$$$  | $$  | $$ $$ $$
# 	| $$  $$$| $$| $$__  $$  | $$  | $$  $$$$
# 	| $$\  $ | $$| $$  | $$  | $$  | $$\  $$$
# 	| $$ \/  | $$| $$  | $$ /$$$$$$| $$ \  $$
# 	|__/     |__/|__/  |__/|______/|__/  \__/

if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'hf:cvu:b:t:VU:', ['help', 'folder=', 'nocolor', 'verbose', 'user=', 'baseurl=', 'token=', 'version', 'useragent='])
	except getopt.GetoptError as e:
		print (e)
		usage()

	signal.signal(signal.SIGINT, blihtek.signal_handler)
	verbose = False
	user = None
	baseurl = 'https://blih.epitech.eu/'
	token = None
	user_agent = 'blih-' + str(versionBLIH)
	if os.getenv('EPITECH_FOLDER') != None and os.getenv('EPITECH_FOLDER') != "":
		folder = os.getenv('EPITECH_FOLDER')
	else:
		folder = os.getenv('PWD')
	otherUser = False
	global colors
	colors = True

	for o, a in opts:
		if o in ('-h', '--help'):
			usage()
		elif o in ('-f', '--folder'):
			folder = a
		elif o in ('-v', '--verbose'):
			verbose = True
		elif o in ('-c', '--nocolor'):
			colors = False
		elif o in ('-u', '--user'):
			otherUser = True
			user = a
		elif o in ('-b', '--baseurl'):
			baseurl = a
		elif o in ('-t', '--token'):
			token = bytes(a, 'utf8')
		elif o in ('-V', '--version'):
			version()
		elif o in ('-U', '--useragent'):
			user_agent = a
		else:
			usage()

	if len(args) == 0:
		usage()

	if user == None:
		if os.getenv("EPITECH_LOGIN") != None and os.getenv("EPITECH_LOGIN") != "":
			user = os.getenv("EPITECH_LOGIN")
		else:
			user = getpass.getuser()
	if token == None or otherUser == True:
		if len(args) >= 1 and (args[0] == 'config' or args[0] == 'group'):
			token = ""
		elif os.getenv("EPITECH_TOKEN") != None and os.getenv("EPITECH_TOKEN") != "" and otherUser == False:
			token = bytes(os.getenv("EPITECH_TOKEN"), 'utf8')
		else:
			if sys.stdin.isatty():
				password = getpass.getpass(setcolor("green") + 'Your password :' + setcolor())
			else:
				password = sys.stdin.readline().rstrip()
			token = bytes(hashlib.sha512(bytes(password, 'utf8')).hexdigest(), 'utf8')

	if args[0] == 'repository':
		repository(args[1:], baseurl, user, token, folder, user_agent)
	elif args[0] == 'group':
		group(args[1:], baseurl, user, token, folder, user_agent)
	elif args[0] == 'sshkey':
		sshkey(args[1:], baseurl, user, token, folder, user_agent)
	elif args[0] == 'whoami':
		whoami(args[1:], baseurl, user, token, folder, user_agent)
	elif args[0] == 'config':
		config(args[1:], baseurl, user, token, folder, user_agent)
	else:
		usage()
